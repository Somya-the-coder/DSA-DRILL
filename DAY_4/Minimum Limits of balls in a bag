//Main concept: minimize so use binary search- leetcode 1670
class Solution {
    public int minimumSize(int[] nums, int maxOperations) {
        //pattern observed:(alw write)

        //each time take max balls and divide it
        //if max ball=even (/2)
        //if max ball=odd ((max balls+1)/2)+1 in 1 bag and max_balls-1 in 2nd bag
        //arraylist for dynamic size is reqd- NO
        //Rem in minimize type qs u use searching
        //and optimized searching is binary search(simply follow its format )
        int r=0;
        //int r=Integer.MAX_VALUE;//direct max but use bruteforce even in interviews
        //T.C for this loop : N
        for(int i:nums)
        {
            r=Math.max(i,r);
        }
        int l=1;
        int res=0;
        //T.C. for this loop - general bin search format follow
        while(l<=r){
            int mid=l+(r-l)/2;
            if(isPossible(nums,mid,maxOperations)){
                res=mid;
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        return res;  
    }
    public boolean isPossible(int nums[],int maxBallsAllowed,int maxOperations)
    //maxballsallowed at each step,maxoperations in array nums{
        int operations=0;
        for(int num:nums){
            if(num>maxBallsAllowed){
                int bags=(int)Math.ceil(num/(double) maxBallsAllowed);
                operations+=bags-1;
            }
            if(operations>maxOperations){
                return false;
            }
        }
        return true;
    }
}
